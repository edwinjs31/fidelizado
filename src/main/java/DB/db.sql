
-- sudo su postgres
-- createuser fidelizados_user
-- createdb fidelizados_db --owner fidelizados_user
-- psql
-- alter user hangman_user with password '12345';
-- \q
-- psql fidelizados_db 

REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO fidelizados_user;

DROP TABLE IF EXISTS logins CASCADE;
CREATE TABLE logins (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"email" character varying(150) UNIQUE CHECK ( "email" ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'),
"pass" character varying(150),
"email_code" character varying(6) default 'VC',
"expiration_time" timestamp
);

REVOKE ALL ON logins FROM public;
GRANT ALL ON logins TO fidelizados_user;


DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"name" character varying(100),
"gender" integer,
"birthdate" date,
"login_id" integer REFERENCES logins ON DELETE CASCADE,
"code" character varying(10),

"token_notification" character varying(200)
);

REVOKE ALL ON users FROM public;
GRANT ALL ON users TO fidelizados_user;


DROP TABLE IF EXISTS business CASCADE;
CREATE TABLE business (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"name" character varying(50),
"phone" character varying(20),
"address" character varying(100),
"vat" character varying(50),
"ratio_euro_point" integer,
"free_prizes" integer default 5,
"login_id" integer REFERENCES logins ON DELETE CASCADE
);

REVOKE ALL ON business FROM public;
GRANT ALL ON business TO fidelizados_user;


DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"bar_code" character varying(100),
"name" character varying(50),
"price" integer,
"business_id" integer REFERENCES business ON DELETE CASCADE,
"photo_path" character varying(100)
);

REVOKE ALL ON products FROM public;
GRANT ALL ON products TO fidelizados_user;


DROP TABLE IF EXISTS prizes CASCADE;
CREATE TABLE prizes (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"name" character varying(50),
"points" integer,
"business_id" integer REFERENCES business ON DELETE CASCADE,
"photo_path" character varying(100)
);

REVOKE ALL ON prizes FROM public;
GRANT ALL ON prizes TO fidelizados_user;


DROP TABLE IF EXISTS bills CASCADE;
CREATE TABLE bills (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"user_id" integer REFERENCES users ON DELETE CASCADE,
"business_id" integer REFERENCES business ON DELETE CASCADE,
"price" integer,
"points" integer,
"bill_date" timestamp
);

REVOKE ALL ON bills FROM public;
GRANT ALL ON bills TO fidelizados_user;


DROP TABLE IF EXISTS bill_lines CASCADE;
CREATE TABLE bill_lines (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"quantity" integer,
"price_unity" integer,
"bill_id" integer REFERENCES bills ON DELETE CASCADE,
"product_id" integer REFERENCES products ON DELETE CASCADE
);

REVOKE ALL ON bill_lines FROM public;
GRANT ALL ON bill_lines TO fidelizados_user;


DROP TABLE IF EXISTS wallets CASCADE;
CREATE TABLE wallets (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"user_id" integer REFERENCES users ON DELETE CASCADE,
"business_id" integer REFERENCES business ON DELETE CASCADE,
"points" integer default 0
);

REVOKE ALL ON wallets FROM public;
GRANT ALL ON wallets TO fidelizados_user;


DROP TABLE IF EXISTS prize_exchanges CASCADE;
CREATE TABLE prize_exchanges (
"id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
"prize_id" integer REFERENCES prizes ON DELETE CASCADE,
"exchange_date" timestamp,
"user_id" integer REFERENCES users ON DELETE CASCADE,
"business_id" integer REFERENCES business ON DELETE CASCADE
);

REVOKE ALL ON prize_exchanges FROM public;
GRANT ALL ON prize_exchanges TO fidelizados_user;


-- FUNCTION
CREATE OR REPLACE FUNCTION update_points() RETURNS TRIGGER AS $update_points$
  DECLARE
  BEGIN
   IF(NEW.points<0) THEN
   NEW.points = 0; 
   RETURN NEW;
   END IF;
 END;
$update_points$ LANGUAGE plpgsql;


-- TRIGGERS
CREATE TRIGGER positive_points_wallet AFTER UPDATE
ON wallets FOR EACH ROW 
EXECUTE PROCEDURE update_points();













